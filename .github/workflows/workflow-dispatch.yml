name: Bump version

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Release tag'
        required: true
        type: choice
        options:
          # - 'major'
          - 'minor'
          - 'patch'
        default: 'patch'
      prerelease:
        description: 'Is this a prerelease?'
        type: boolean
        default: true
      prerelease-type:
        description: 'Prerelease tag'
        required: false
        type: string
        default: 'rc'
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Find previous release
        id: previoustag
        run: |
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            regex='^[0-9]+\.[0-9]+\.[0-9]-${{ github.event.inputs.prerelease-type }}\.[0-9]{0,2}$'
          else
            regex='^[0-9]{0,2}\.[0-9]{0,2}\.[0-9]{0,2}$'
          fi
          previousTag=$(git tag --list | grep -E "$regex" | sort -V | tail -n 1)
          echo "All tags: $(git tag --list)"
          echo "Regex: $regex"
          echo "previousTag=${previousTag}"
          echo "previousTag=${previousTag}" >> $GITHUB_OUTPUT
      - name: Print previous tag
        run: |
          echo "Previous tag: ${{ steps.previoustag.outputs.previousTag }}"

      - name: Calculate new version
        id: calculate
        run: |
          previousTag=${{ steps.previoustag.outputs.previousTag }}
          prerelease=${{ github.event.inputs.prerelease }}
          prereleaseType=${{ github.event.inputs.prerelease-type }}
          type=${{ github.event.inputs.type }}

          if [ -z "$previousTag" ]; then
            previousTag="0.0.0"
          fi

          # Extract version components
          if [[ "$previousTag" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-([a-zA-Z]+)\.([0-9]+))?$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            existingPrereleaseType=${BASH_REMATCH[5]}
            existingPrereleaseVersion=${BASH_REMATCH[6]}
          else
            echo "Error: Invalid previous tag format."
            exit 1
          fi

          if [ "$prerelease" = "false" ]; then
            # Increment version
            case "$type" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac
          fi

          if [ "$prerelease" = "true" ]; then
            if [ "$existingPrereleaseType" = "$prereleaseType" ]; then
              prereleaseVersion=$((existingPrereleaseVersion + 1))
            else
              prereleaseVersion=1
            fi
            newVersion="$major.$minor.$patch-$prereleaseType.$prereleaseVersion"
          else
            newVersion="$major.$minor.$patch"
          fi

          echo "newVersion=$newVersion"
          echo "newVersion=$newVersion" >> $GITHUB_OUTPUT

      - name: Set up Git for pushing
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create new version tag
        id: newtag
        run: |
          newVersion=${{ steps.calculate.outputs.newVersion }}
          git tag $newVersion -m "Release $newVersion"


      - name: Push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          newVersion=${{ steps.calculate.outputs.newVersion }}
          git push origin "$newVersion"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tag_name: ${{ steps.find.outputs.previousTag }}
          # release_name: Release ${{ steps.find.outputs.previousTag }}
          # draft: false
          # prerelease: ${{ github.event.inputs.prerelease }}

          prerelease: ${{ github.event.inputs.prerelease }}
          generate_release_notes: true
          draft: true
          fail_on_unmatched_files: true
          tag_name: ${{ steps.previoustag.outputs.newVersion }}
          target_commitish: ${{ steps.calculate.outputs.newVersion }}
